use sea_orm_migration::{prelude::*, schema::*};

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // user table migration
        manager
            .create_table(
                Table::create()
                    .table(User::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(User::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(User::Username)
                            .string()
                            .not_null()
                            .unique_key()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::Email)
                            .string()
                            .not_null()
                            .unique_key()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::FullName).string().to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::PasswordHash)
                            .string()
                            .not_null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::IsActive)
                            .boolean()
                            .not_null()
                            .default(true)
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::IsAdmin)
                            .boolean()
                            .not_null()
                            .default(false)
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::CreatedAt)
                            .timestamp_with_time_zone()
                            .not_null()
                            .default(Expr::current_timestamp())
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::UpdatedAt)
                            .timestamp_with_time_zone()
                            .not_null()
                            .default(Expr::current_timestamp())
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::LastLogin)
                            .timestamp_with_time_zone()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::Metadata)
                            .json()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::PhoneNumber)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::RegistrationVersion)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(User::LoginProvider)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .to_owned(),
            )
            .await?;
        // user profile table migration
        manager
            .create_table(
                Table::create()
                    .table(UserProfile::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(UserProfile::UserId)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(UserProfile::ProfilePicture)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(UserProfile::DisplayName)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(UserProfile::Bio)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(UserProfile::Location)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(UserProfile::Website)
                            .string()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(UserProfile::SocialLinks)
                            .json()
                            .null()
                            .to_owned(),
                    )
                    .col(
                        ColumnDef::new(UserProfile::Metadata)
                            .json()
                            .null()
                            .to_owned(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("fk_user_profile_user_id")
                            .from(UserProfile::Table, UserProfile::UserId)
                            .to(User::Table, User::Id)
                            .on_delete(ForeignKeyAction::Cascade)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;

        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // Drop user profile table first due to foreign key constraint
        manager
            .drop_table(Table::drop().table(UserProfile::Table).to_owned())
            .await?;
        // Then drop user table
        manager
            .drop_table(Table::drop().table(User::Table).to_owned())
            .await?;
        Ok(())
    }
}

#[derive(Iden)]
enum User {
    Table,
    Id,
    Username,
    Email,
    FullName,
    PasswordHash,
    IsActive,
    IsAdmin,
    CreatedAt,
    UpdatedAt,
    LastLogin,
    Metadata,
    PhoneNumber,
    RegistrationVersion,
    LoginProvider,
}

#[derive(Iden)]
enum UserProfile {
    Table,
    UserId,
    ProfilePicture,
    DisplayName,
    Bio,
    Location,
    Website,
    SocialLinks,
    Metadata,
}
